Springboot
Enquanto que o Spring Framework é baseado no padrão de injeção de dependências, o Springboot foca na configuração automática

Antes do Springboot
Desafios com a configuração do projeto
- Dependência individual
- verbosidade
- Incompatibilidade de versões
- Complexiade de gestão
- Configurações complexas e repetitivas

Dado que a maior parte das configurações necessárias para o início de um projeto são sempre as mesmas, 
por que não iniciar um projeto com todas estas configurações já definidas?

Starters:
são descritores de dependência
Benefícios:
	- coesão
	- versões compatíveis 
	- otimização do tempo
	- configuração simples
	- foco no negócio

Alguns Starters
Listagem de alguns starters mais utilizados
Spring-boot-starter
	- data-jpa: Integração ao banco de dados via JPA - Hibernate
	- data-mongodb: Interação com banco de dados MongoDB
	- web: inclusão do container Tomcat para aplicações REST
	- web-services: Webservices baseados na arquitetura SOAP
	- batch: implementação de JOBs de processos
	- test: disponibilização de recursos para testes unitários como JUnit
	- openfeign: Client HTTP baseado em interfaces
	- actuator: gerenciamento de monitoramento da aplicação


Usar @Component :
- quando tem acesso ao código fonte

usar @Bean:
- quando não tem acesso ao código
- não é uma classe criada por você
- exemplo: usar em CommandLineRunner

-------------------------------------------------------------
application.properties: 
valores podem ser centralizados nesse arquivo:
	- estados, informaçãoe da aplicação
	- propriedades de algum contexto que não terá alteração no decorrer da aplicação
	
no application.properties:
	nome=Felipe
na classe que quero utilizar esse campo:
	@Value("${nome:Valor-Padrao}")			caso não ache a propriedade "nome", envia o Valor_Padrao

ConfigurationProperties:
centraliza todas informações centralizadas no application.properties
----------------------------------------------------------------------------

O que é ORM:
Object-Relational Mapping, em português, mapeamento objeto-relacional, é um recurso para aproximar 
o paradigma da orientação a objetos ao contexto de banco de dados relacional

O uso de ORM é realizado através do mapeamento de objeto para uma tabela por uma biblioteca ou framework

JPA:
JPA é uma especificação baseada em interfaces, que através de um framework realiza operações de persistência de objetos em Java

Implementações JPA
 - Hibernate
 - EclipseLink
 - Top Link
 - Open JPA

Mapeamento:
Aspectos das anotações de mapeamento do JPA:
- identificação - da classe
- definição - através de atributos
- relacionamento - entre as entidades
- herança - 
- persistência - anotações que realizam persistência

----------------------------------------------------------------
Spring Data JPA:
adiciona uma camada sobre o JPA, ou seja, utiliza todos os recursos definidos pela JPA, 
especialmente os mapeamentos de entidade e os recursos de persistência baseado em interfaces e anotações

Repository JPA:
é um padrão de projeto similar ao Data Access Object no sentido de que seu objetivo é abstrair o acesso a dados de forma genérica a partir de seu modelo

médotos do data jpa:
- save: insere e atualiza os dados de uma entidade
- findById: retorna o objeto localizado pelo seu id
- existsById: verifica a existência de um obejto pelo id informado, retornando boolean
- findAll: retorna uma coleção contendo todos os registros da tabela no banco de dados
- delete: deleta um registro da respectiva tabela mapeada do banco de dados
- count: retorna a quantidade de registro de uma tabela mapeada do banco de dados

Query Method:
O spring data jpa se encarrega de interpretar a assinatura de um método (nome + parâmetros) para montar a JPQL correspondente

Query Override:
Vamos imaginar que você precisa montar uma query um tanto avançada, mas ficaria iniável utilizar o padrão QueryMethod? 
Como nossos repositórios são interfaces não temos implementação de código, é aí que precisa definir a consulta de forma manual através da anotação @Query
