--------------------------------------------------------------------------------------------------------------------
1) Herança:
--------------------------------------------------------------------------------------------------------------------

"É o relacionamento entre classes em que uma classe chamada de subclasse (classe filha, classe derivada) 
é uma extensão, um subtipo, de outra classe chamada de superclasse (classe pai, classe mãe, classe base). 
Devido a isto, a subclasse consegue reaproveitar os atributos e métodos dela. Além dos que venha, a ser herdados, 
a subclasse pode definir seus próprios membros"
(Principal finalidade de herança é criar subtipos, e não para reuso, pois há reuso sem precisar utilizar herança.)

------------
Códigos: 
------------

	- Java:
		class A extends B {}				A herda de B

	- C#:
		class A : B {}

	- Python: 
		class A(B):

------------
Exercício 1:
------------
 
Crie a classe "Veiculo", "Carro", "Moto" e "Caminhão"
Fazer a relação de herança.

-------------------
Tipos de Herança:
-------------------

	- Simples:
		- a classe filha tem só uma classe mãe

	- Múltipla:
		- a classe filha tem uma ou mais classes mães

		- Java e C# não têm herança múltipla

		- Python:
			class A(B,C):
				pass
------------
Upcasting:
------------

Subir na hierarquia de classes

	- Java e C#: 
		A a = new B(); 			transforma B em A

	- Python: não existe

------------
Downcasting:
------------

Descer na hierarquia de classes

	- Java:
		B a = (B) new A();		transforma A em B

	- C#:
		B b = (B) new A();


	- Python: não existe

---------------
Polimorfismo:
---------------

"A mesma ação(método), se comportando diferente"

---------------
Sobrescrita:
---------------

"A mesma ação, **podendo** se comportar diferente"

------------
Exercício 2:
------------

Crie classes "Funcionario", "Gerente", "Vendedor" e "Faxineiro"
Realize upcasts e downcasts

--------------------------------------------------------------------------------------------------------------------
2) Associação:
--------------------------------------------------------------------------------------------------------------------

"Possibilita um relacionamento entre classes/objetos, no qual estes possam pedir ajuda a outras classes/objetos 
e representar de forma completa o conceito ao qual se destinam. Neste tipo de relacionamento as classes e os objetos 
integarem entre si para atingir seus objetivos"

------------
Tipos:
------------

	- Estrutural:

		- Composição
		- Agregação

	- Comportamental:

		- Dependência

---------------
a) Estrutural:
---------------

	- Composição:

		"Com parte Todo" (a parte só existe com o todo)
		ex: Pessoa e Endereço

		Java: 
			class Pessoa {
				Endereco endereco;
			}

	- Agregação:
 
		"Sem parte todo" (a parte pode existir sem ter o todo)
		ex: Disciplina e Aluno

		Java:
			class Discilina {
				Aluno aluno;
			}

Diferença: composição existe dependência entre as duas classes.

----------------------------------------------
b) Comportamental(métodos recebe um objeto)
----------------------------------------------

	- Dependência: "Depende de"	

	Java: 
		class Compra {
			finalizar (Cupom cupom, ...){
			}
		}

------------------------
Herança x Associação:
------------------------

Associação pode ser mudada durante a execução do software, herança não.
"Uma coisa é a outra?" se a resposta for sim , utilizar herança, caso contrário, usar associação, pois "uma coisa usa a outra"

-------------
Exercício: 
-------------

Apenas para praticar, codifique os exemplos dos slides anteriores sobre as associações

--------------------------------------------------------------------------------------------------------------------
3) Interface:
--------------------------------------------------------------------------------------------------------------------

"Define um contrato que deve ser seguido pela classe que a implementa. Quando uma classe implementa uma interface, 
ela se compromete a realizar todos os comportamentos que a interface disponibiliza"

-------------
Códigos:
-------------

	- Java:
		interface A {}
		
		class B implements A {}

	- C#:
		interface A{}
		
		class B : A{}

	- Python:
		não existe

-------------
Exercício:
-------------

	Apenas para praticar, crie uma interface chamada "OperacaoMatematica". 
	Crie também 4 métodos das operações básicas: soma, subtração, multiplicação e divisão.